/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.Color;
import java.io.FileNotFoundException;
import javax.swing.*;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.*;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.*;
/**
 *
 * @author Keiven
 */
public class ClientUploadFrame extends javax.swing.JFrame implements Runnable {

    //status koneksi
    final private int NULL = 0;
    final private int CONNECTED = 1;
    final private int DISCONNECTED = 2;
    
    //status client
    final private int IDLE = 1;
    final private int SENT_FILE = 2;
    //socket client
    private Socket socket;
    private int connectionStatus = DISCONNECTED;
    private int state=NULL;
    
    //FILE
    private JFileChooser fc = null;
    private File file = null;
    private Scanner reader;
    private OutputStream outputStream;
    private InputStream inputStream;
    private DataOutputStream dataOut;
    private DataInputStream dataIn;
    private FileInputStream fileStream;
    private BufferedInputStream bufIn;
    private BufferedOutputStream bufOut;
    
    private Thread t;
    
    public ClientUploadFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popup = new javax.swing.JDialog();
        popupMsg = new javax.swing.JLabel();
        popupClose = new javax.swing.JButton();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPanel1 = new javax.swing.JPanel();
        browse = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        upload = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        connect = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        popup.setTitle("tes aja");
        popup.setLocationByPlatform(true);
        popup.setMinimumSize(new java.awt.Dimension(527, 187));
        popup.setResizable(false);

        popupMsg.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        popupMsg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        popupMsg.setText("put message here!");

        popupClose.setText("OK");
        popupClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout popupLayout = new javax.swing.GroupLayout(popup.getContentPane());
        popup.getContentPane().setLayout(popupLayout);
        popupLayout.setHorizontalGroup(
            popupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(popupLayout.createSequentialGroup()
                .addGroup(popupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(popupLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(popupMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(popupLayout.createSequentialGroup()
                        .addGap(201, 201, 201)
                        .addComponent(popupClose, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        popupLayout.setVerticalGroup(
            popupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(popupLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(popupMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(popupClose)
                .addGap(33, 33, 33))
        );

        popup.getAccessibleContext().setAccessibleName("");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 102, 102));
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Client File Uploader"));

        browse.setText("Browse");
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Nama File");

        jLabel2.setText("Ukuran    ");

        jLabel4.setText(":");

        jLabel5.setText(":");

        upload.setText("Upload");
        upload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(browse, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(upload, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(83, 83, 83)
                        .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browse)
                    .addComponent(clear)
                    .addComponent(upload))
                .addGap(50, 50, 50))
        );

        jLabel3.setText("Status");

        connect.setText("Connect");
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });

        jLabel7.setText(": disconect");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(connect, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addComponent(connect)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
        fc = new JFileChooser("D:");//baca file dari DIR D://
        fc.showOpenDialog(this);
        file = fc.getSelectedFile();//select file yang sudah dipilih
     
        try {
            //Open an input stream
            reader = new Scanner(fc.getSelectedFile());
            jTextField1.setText(file.getAbsolutePath());//tampilkan file ke text field
            jLabel4.setText(": "+file.getName());
            jLabel5.setText(": "+file.length()/1024+" KB");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ClientUploadFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
            
    }//GEN-LAST:event_browseActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
       
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        jTextField1.setText("");
        jLabel4.setText(":");
        jLabel5.setText(":");
    }//GEN-LAST:event_clearActionPerformed

    private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
       if(connectionStatus == DISCONNECTED)
            Connect();
        else if(connectionStatus == CONNECTED)
            Disconnect();
    }//GEN-LAST:event_connectActionPerformed
    
    private void Connect()
    {
        //bangun socket
        try {
            socket = new Socket("192.168.137.1", 7070);
            inputStream = socket.getInputStream();
            outputStream = socket.getOutputStream();
            dataOut = new DataOutputStream(outputStream);
            dataIn = new DataInputStream(inputStream);
            jLabel7.setText(": connected");
            connect.setText("Disconnect");
            connectionStatus = CONNECTED;
            state = IDLE;
            //jalankan thread untuk cek koneksi ke server;
            t = new Thread(this);
            t.start();
        } catch (Exception ex) {
            Popup("Warning",ex.getMessage()+", check your connection!",Color.red);
        }
    }
    
    private void Disconnect()
    {
        try{
            t.interrupt();
            connectionStatus = DISCONNECTED;
            state = NULL;
            socket.close();
            inputStream.close();
            outputStream.flush();
            outputStream.close();
            dataIn.close();
            dataOut.flush();
            dataOut.close();
            connect.setText("Connect");
            jLabel7.setText(": disconnect");
        }catch(Exception ex)
        {
            jLabel7.setText(": "+ex.getMessage());
        }
    }
    
    private void uploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadActionPerformed
        if(connectionStatus==DISCONNECTED) //jika koneksi belum terhubung, tapi file upload sudah ditekan
        {
            Popup("Warning","please connect first before upload file!",Color.red);
        }
        else if(connectionStatus == CONNECTED)
        {
            if(file == null)//koneksi sudah terhubung tapi file belum dipilih
            {
                Popup("Warning","please choose file first before upload file!",Color.red);
            }
            else
            {
                  state = SENT_FILE;
            }
        }
    }//GEN-LAST:event_uploadActionPerformed

    private void popupCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupCloseActionPerformed
        popup.dispose();//tutup popup
    }//GEN-LAST:event_popupCloseActionPerformed
    
    private void Popup(String title, String message, Color color)
    {
        popup.setTitle(title); //set judul popup
        popupMsg.setText(message); // set pesan popup
        popupMsg.setForeground(color); // set warna tulisan
        popup.setLocationRelativeTo(null);//supaya posisi popup ditengah
        popup.setVisible(true); // tampilkan popup
    }        
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* set UIManager tampilan windows*/
        try {
            /* Create and display the form */
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ClientUploadFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(ClientUploadFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(ClientUploadFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(ClientUploadFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientUploadFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browse;
    private javax.swing.JButton clear;
    private javax.swing.JButton connect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JDialog popup;
    private javax.swing.JButton popupClose;
    private javax.swing.JLabel popupMsg;
    private javax.swing.JButton upload;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        byte temp=1;
        while(connectionStatus==CONNECTED)
        {
            try {
                Thread.sleep(500);
            } catch (InterruptedException ex) {}
            
            try {
                //System.out.println("sent byte "+temp);
                dataOut.writeByte(0);
                dataOut.flush();
                temp=dataIn.readByte();
            }catch (IOException ex) {temp=1;}
            
            if(temp == 0)
            {
                if(state == IDLE)
                {
                    temp=1;
                    System.out.println("server reply");
                }
                else if(state == SENT_FILE)
                {
                    upload();
                }
            }
            else if(temp == 1 && connectionStatus==CONNECTED)
            {
                System.out.println("error sent byte "+temp);
                Popup("Warning","connection is broken!",Color.red);
                Disconnect();
                break;
                
            }
        }
    }
    
    
    private void upload()
    {
        
        try{
            dataOut.writeByte(1);
            dataOut.writeUTF(file.getName());
            
            long length = file.length();
            if(length > Integer.MAX_VALUE)
                Popup("WARNING","file is to large!",Color.RED);
            byte[] bytes = new byte[(int)length];
            fileStream = new FileInputStream(file);
            bufIn = new BufferedInputStream(fileStream);
            bufOut = new BufferedOutputStream(socket.getOutputStream());
            int count;
            while((count = bufIn.read(bytes)) > 0)
            {
                bufOut.write(bytes, 0, count);
            }
            bufOut.flush();
            bufOut.close();
            bufIn.close();
            fileStream.close();
            state = IDLE;
            System.out.println("file already sent");
           
        }catch(Exception e)
        {
            state = IDLE;
            Popup("Warning","Something wrong with your connection",Color.red);
        }
    }
}
